// no db connection

my_posts = [
    {"title": "title of the post", "content": "content of post 1", "id": 1},
    {"title": "favorite foods", "content": "I like pizza", "id": 2},
]


def find_post(id):
    for post in my_posts:
        if post["id"] == id:
            return post
    return None


def delete_post_by_id(id: int):
    for index, post in enumerate(my_posts):
        if post["id"] == id:
            del my_posts[index]
            return True
    return False


def find_post_by_index(id: int):
    for i, post in enumerate(my_posts):
        if post["id"] == id:
            return i
    return -1

# @app.get("/posts/{id}")
# def get_post(id: int):
#     post = find_post(id)
#     if not post:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND, detail="post not found"
#         )
#     return {"post_detail": post}

# @app.delete("/posts/{id}", status_code=status.HTTP_204_NO_CONTENT)
# def delete_post(id: int):
#     print(find_post(id))
#     if not delete_post_by_id(id):
#         raise HTTPException(status.HTTP_404_NOT_FOUND, detail="post does not exist")
#     return Response(status_code=status.HTTP_204_NO_CONTENT)

# @app.put("/posts/{id}", status_code=status.HTTP_202_ACCEPTED)
# def update_post(id: int, body: Post):
#     # client is sending id of the post and requesting to update that post with new body
#     # 1. convert to dictionary the response body
#     index = find_post_by_index(id)
#     if index < 0:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND,
#             detail=f"Post with id: {id} was not found",
#         )
#     post_dict = body.model_dump()
#     post_dict["id"] = id
#     my_posts[index] = post_dict
#     return {"message": f"post with id: {id} was updated"}