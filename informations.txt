@app.post("/createposts")
def create_posts(payLoad: dict = Body(...)):
    return {"new post": f"title {payLoad['title']} content {payLoad['content']}"}

    -- getting payload from client without validating


Pydentic schema extends BaseModel
class Post(BaseModel):
    title: str
    content: str
    published: bool = True
    rating: Optional[int] = None


-------Postgres Docker data--------
created  /Users/askarmamytov/.postgres_docker  directory to put data

docker run -d \
--name fastapi-postgres \
-e POSTGRES_PASSWORD=password \
-v /Users/askarmamytov/.postgres_docker:/var/lib/postgresql/data \
-p 5432:5432 \
postgres-fastapi

Once running, we can use docker bash to login:
docker exec -it 05b5 /bin/bash 

psql -h localhost -p 5432 -U postgres

-----------------------------------------

We know pydentic model is used to strict Client request body to map to our pydentic schema model.
We can also use pydentic model to shape our response model.
To achieve it we:

1. Create 
    ResponsePost(BaseModel):
        title: str
        content: str
        published: bool

        class Config:
            from_attributes: true

2. Add this schema to DECORATOR (important) as response_model=models.ResponsePost
        @app.post("/posts", status_code=status.HTTP_201_CREATED, response_model=schemas.ResponsePost)

Now it strictly abides by fields defined in pydentic ResponsePost.
One caveat: When returning list of ORM models: Ex: /get_posts --> return several models, we need to convert response_model to return list.
It is imported: from typing import List
@app.get("/posts", response_model=List[schemas.ResponsePost])


Alemic - DataBase Migration tool
DB migration tool allows us to incrementally track changes database schema and rollback changes to any point in time.
It is same as git that allows to incrementally add code changes and revert back when necessary


[GUNICORN]
gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000

[Unit]
Description=Demo FastAPI service
After=network.target

[Service]
User=ubuntu
Group=ubuntu
WorkingDirectory=/home/ubuntu/app/src
Enviroment="PATH=/home/ubuntu/app/venv/bin"
ExecStart=/home/ubuntu/app/venv/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000

[Install]
WantedBy=multi-user.target